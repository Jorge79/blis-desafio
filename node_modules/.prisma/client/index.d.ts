
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model UserDocuments
 * 
 */
export type UserDocuments = $Result.DefaultSelection<Prisma.$UserDocumentsPayload>
/**
 * Model Abilities
 * 
 */
export type Abilities = $Result.DefaultSelection<Prisma.$AbilitiesPayload>
/**
 * Model UsersAbilities
 * 
 */
export type UsersAbilities = $Result.DefaultSelection<Prisma.$UsersAbilitiesPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;

  /**
   * `prisma.userDocuments`: Exposes CRUD operations for the **UserDocuments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserDocuments
    * const userDocuments = await prisma.userDocuments.findMany()
    * ```
    */
  get userDocuments(): Prisma.UserDocumentsDelegate<ExtArgs>;

  /**
   * `prisma.abilities`: Exposes CRUD operations for the **Abilities** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Abilities
    * const abilities = await prisma.abilities.findMany()
    * ```
    */
  get abilities(): Prisma.AbilitiesDelegate<ExtArgs>;

  /**
   * `prisma.usersAbilities`: Exposes CRUD operations for the **UsersAbilities** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UsersAbilities
    * const usersAbilities = await prisma.usersAbilities.findMany()
    * ```
    */
  get usersAbilities(): Prisma.UsersAbilitiesDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.1.0
   * Query Engine version: 11f085a2012c0f4778414c8db2651556ee0ef959
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    UserDocuments: 'UserDocuments',
    Abilities: 'Abilities',
    UsersAbilities: 'UsersAbilities'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "users" | "userDocuments" | "abilities" | "usersAbilities"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      UserDocuments: {
        payload: Prisma.$UserDocumentsPayload<ExtArgs>
        fields: Prisma.UserDocumentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserDocumentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDocumentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserDocumentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDocumentsPayload>
          }
          findFirst: {
            args: Prisma.UserDocumentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDocumentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserDocumentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDocumentsPayload>
          }
          findMany: {
            args: Prisma.UserDocumentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDocumentsPayload>[]
          }
          create: {
            args: Prisma.UserDocumentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDocumentsPayload>
          }
          createMany: {
            args: Prisma.UserDocumentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDocumentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDocumentsPayload>
          }
          update: {
            args: Prisma.UserDocumentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDocumentsPayload>
          }
          deleteMany: {
            args: Prisma.UserDocumentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserDocumentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserDocumentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDocumentsPayload>
          }
          aggregate: {
            args: Prisma.UserDocumentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserDocuments>
          }
          groupBy: {
            args: Prisma.UserDocumentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserDocumentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserDocumentsCountArgs<ExtArgs>
            result: $Utils.Optional<UserDocumentsCountAggregateOutputType> | number
          }
        }
      }
      Abilities: {
        payload: Prisma.$AbilitiesPayload<ExtArgs>
        fields: Prisma.AbilitiesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AbilitiesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbilitiesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AbilitiesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbilitiesPayload>
          }
          findFirst: {
            args: Prisma.AbilitiesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbilitiesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AbilitiesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbilitiesPayload>
          }
          findMany: {
            args: Prisma.AbilitiesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbilitiesPayload>[]
          }
          create: {
            args: Prisma.AbilitiesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbilitiesPayload>
          }
          createMany: {
            args: Prisma.AbilitiesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AbilitiesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbilitiesPayload>
          }
          update: {
            args: Prisma.AbilitiesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbilitiesPayload>
          }
          deleteMany: {
            args: Prisma.AbilitiesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AbilitiesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AbilitiesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbilitiesPayload>
          }
          aggregate: {
            args: Prisma.AbilitiesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAbilities>
          }
          groupBy: {
            args: Prisma.AbilitiesGroupByArgs<ExtArgs>
            result: $Utils.Optional<AbilitiesGroupByOutputType>[]
          }
          count: {
            args: Prisma.AbilitiesCountArgs<ExtArgs>
            result: $Utils.Optional<AbilitiesCountAggregateOutputType> | number
          }
        }
      }
      UsersAbilities: {
        payload: Prisma.$UsersAbilitiesPayload<ExtArgs>
        fields: Prisma.UsersAbilitiesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersAbilitiesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersAbilitiesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersAbilitiesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersAbilitiesPayload>
          }
          findFirst: {
            args: Prisma.UsersAbilitiesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersAbilitiesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersAbilitiesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersAbilitiesPayload>
          }
          findMany: {
            args: Prisma.UsersAbilitiesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersAbilitiesPayload>[]
          }
          create: {
            args: Prisma.UsersAbilitiesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersAbilitiesPayload>
          }
          createMany: {
            args: Prisma.UsersAbilitiesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UsersAbilitiesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersAbilitiesPayload>
          }
          update: {
            args: Prisma.UsersAbilitiesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersAbilitiesPayload>
          }
          deleteMany: {
            args: Prisma.UsersAbilitiesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsersAbilitiesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsersAbilitiesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersAbilitiesPayload>
          }
          aggregate: {
            args: Prisma.UsersAbilitiesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsersAbilities>
          }
          groupBy: {
            args: Prisma.UsersAbilitiesGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersAbilitiesGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersAbilitiesCountArgs<ExtArgs>
            result: $Utils.Optional<UsersAbilitiesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    userDocuments: number
    usersAbilities: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userDocuments?: boolean | UsersCountOutputTypeCountUserDocumentsArgs
    usersAbilities?: boolean | UsersCountOutputTypeCountUsersAbilitiesArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountUserDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserDocumentsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountUsersAbilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersAbilitiesWhereInput
  }


  /**
   * Count Type AbilitiesCountOutputType
   */

  export type AbilitiesCountOutputType = {
    usersAbilities: number
  }

  export type AbilitiesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usersAbilities?: boolean | AbilitiesCountOutputTypeCountUsersAbilitiesArgs
  }

  // Custom InputTypes
  /**
   * AbilitiesCountOutputType without action
   */
  export type AbilitiesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbilitiesCountOutputType
     */
    select?: AbilitiesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AbilitiesCountOutputType without action
   */
  export type AbilitiesCountOutputTypeCountUsersAbilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersAbilitiesWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    name: string | null
    birthdate: Date | null
    email: string | null
    password: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    name: string | null
    birthdate: Date | null
    email: string | null
    password: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    name: number
    birthdate: number
    email: number
    password: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    id?: true
    name?: true
    birthdate?: true
    email?: true
    password?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    name?: true
    birthdate?: true
    email?: true
    password?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    name?: true
    birthdate?: true
    email?: true
    password?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: string
    name: string
    birthdate: Date
    email: string
    password: string
    created_at: Date
    updated_at: Date
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    birthdate?: boolean
    email?: boolean
    password?: boolean
    created_at?: boolean
    updated_at?: boolean
    userDocuments?: boolean | Users$userDocumentsArgs<ExtArgs>
    usersAbilities?: boolean | Users$usersAbilitiesArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>


  export type UsersSelectScalar = {
    id?: boolean
    name?: boolean
    birthdate?: boolean
    email?: boolean
    password?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userDocuments?: boolean | Users$userDocumentsArgs<ExtArgs>
    usersAbilities?: boolean | Users$usersAbilitiesArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      userDocuments: Prisma.$UserDocumentsPayload<ExtArgs>[]
      usersAbilities: Prisma.$UsersAbilitiesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      birthdate: Date
      email: string
      password: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsersFindUniqueArgs>(args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(args: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsersFindFirstArgs>(args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsersFindManyArgs>(args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends UsersCreateArgs>(args: SelectSubset<T, UsersCreateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UsersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsersCreateManyArgs>(args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends UsersDeleteArgs>(args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsersUpdateArgs>(args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsersDeleteManyArgs>(args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsersUpdateManyArgs>(args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends UsersUpsertArgs>(args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userDocuments<T extends Users$userDocumentsArgs<ExtArgs> = {}>(args?: Subset<T, Users$userDocumentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserDocumentsPayload<ExtArgs>, T, "findMany"> | Null>
    usersAbilities<T extends Users$usersAbilitiesArgs<ExtArgs> = {}>(args?: Subset<T, Users$usersAbilitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersAbilitiesPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly id: FieldRef<"Users", 'String'>
    readonly name: FieldRef<"Users", 'String'>
    readonly birthdate: FieldRef<"Users", 'DateTime'>
    readonly email: FieldRef<"Users", 'String'>
    readonly password: FieldRef<"Users", 'String'>
    readonly created_at: FieldRef<"Users", 'DateTime'>
    readonly updated_at: FieldRef<"Users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }

  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }

  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }

  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }

  /**
   * Users.userDocuments
   */
  export type Users$userDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDocuments
     */
    select?: UserDocumentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDocumentsInclude<ExtArgs> | null
    where?: UserDocumentsWhereInput
    orderBy?: UserDocumentsOrderByWithRelationInput | UserDocumentsOrderByWithRelationInput[]
    cursor?: UserDocumentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserDocumentsScalarFieldEnum | UserDocumentsScalarFieldEnum[]
  }

  /**
   * Users.usersAbilities
   */
  export type Users$usersAbilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersAbilities
     */
    select?: UsersAbilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersAbilitiesInclude<ExtArgs> | null
    where?: UsersAbilitiesWhereInput
    orderBy?: UsersAbilitiesOrderByWithRelationInput | UsersAbilitiesOrderByWithRelationInput[]
    cursor?: UsersAbilitiesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersAbilitiesScalarFieldEnum | UsersAbilitiesScalarFieldEnum[]
  }

  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
  }


  /**
   * Model UserDocuments
   */

  export type AggregateUserDocuments = {
    _count: UserDocumentsCountAggregateOutputType | null
    _min: UserDocumentsMinAggregateOutputType | null
    _max: UserDocumentsMaxAggregateOutputType | null
  }

  export type UserDocumentsMinAggregateOutputType = {
    id: string | null
    name: string | null
    url: string | null
    user_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserDocumentsMaxAggregateOutputType = {
    id: string | null
    name: string | null
    url: string | null
    user_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserDocumentsCountAggregateOutputType = {
    id: number
    name: number
    url: number
    user_id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UserDocumentsMinAggregateInputType = {
    id?: true
    name?: true
    url?: true
    user_id?: true
    created_at?: true
    updated_at?: true
  }

  export type UserDocumentsMaxAggregateInputType = {
    id?: true
    name?: true
    url?: true
    user_id?: true
    created_at?: true
    updated_at?: true
  }

  export type UserDocumentsCountAggregateInputType = {
    id?: true
    name?: true
    url?: true
    user_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UserDocumentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserDocuments to aggregate.
     */
    where?: UserDocumentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDocuments to fetch.
     */
    orderBy?: UserDocumentsOrderByWithRelationInput | UserDocumentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserDocumentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserDocuments
    **/
    _count?: true | UserDocumentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserDocumentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserDocumentsMaxAggregateInputType
  }

  export type GetUserDocumentsAggregateType<T extends UserDocumentsAggregateArgs> = {
        [P in keyof T & keyof AggregateUserDocuments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserDocuments[P]>
      : GetScalarType<T[P], AggregateUserDocuments[P]>
  }




  export type UserDocumentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserDocumentsWhereInput
    orderBy?: UserDocumentsOrderByWithAggregationInput | UserDocumentsOrderByWithAggregationInput[]
    by: UserDocumentsScalarFieldEnum[] | UserDocumentsScalarFieldEnum
    having?: UserDocumentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserDocumentsCountAggregateInputType | true
    _min?: UserDocumentsMinAggregateInputType
    _max?: UserDocumentsMaxAggregateInputType
  }

  export type UserDocumentsGroupByOutputType = {
    id: string
    name: string
    url: string
    user_id: string
    created_at: Date
    updated_at: Date
    _count: UserDocumentsCountAggregateOutputType | null
    _min: UserDocumentsMinAggregateOutputType | null
    _max: UserDocumentsMaxAggregateOutputType | null
  }

  type GetUserDocumentsGroupByPayload<T extends UserDocumentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserDocumentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserDocumentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserDocumentsGroupByOutputType[P]>
            : GetScalarType<T[P], UserDocumentsGroupByOutputType[P]>
        }
      >
    >


  export type UserDocumentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    url?: boolean
    user_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userDocuments"]>


  export type UserDocumentsSelectScalar = {
    id?: boolean
    name?: boolean
    url?: boolean
    user_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type UserDocumentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }

  export type $UserDocumentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserDocuments"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      url: string
      user_id: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["userDocuments"]>
    composites: {}
  }

  type UserDocumentsGetPayload<S extends boolean | null | undefined | UserDocumentsDefaultArgs> = $Result.GetResult<Prisma.$UserDocumentsPayload, S>

  type UserDocumentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserDocumentsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserDocumentsCountAggregateInputType | true
    }

  export interface UserDocumentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserDocuments'], meta: { name: 'UserDocuments' } }
    /**
     * Find zero or one UserDocuments that matches the filter.
     * @param {UserDocumentsFindUniqueArgs} args - Arguments to find a UserDocuments
     * @example
     * // Get one UserDocuments
     * const userDocuments = await prisma.userDocuments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserDocumentsFindUniqueArgs>(args: SelectSubset<T, UserDocumentsFindUniqueArgs<ExtArgs>>): Prisma__UserDocumentsClient<$Result.GetResult<Prisma.$UserDocumentsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserDocuments that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserDocumentsFindUniqueOrThrowArgs} args - Arguments to find a UserDocuments
     * @example
     * // Get one UserDocuments
     * const userDocuments = await prisma.userDocuments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserDocumentsFindUniqueOrThrowArgs>(args: SelectSubset<T, UserDocumentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserDocumentsClient<$Result.GetResult<Prisma.$UserDocumentsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserDocuments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDocumentsFindFirstArgs} args - Arguments to find a UserDocuments
     * @example
     * // Get one UserDocuments
     * const userDocuments = await prisma.userDocuments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserDocumentsFindFirstArgs>(args?: SelectSubset<T, UserDocumentsFindFirstArgs<ExtArgs>>): Prisma__UserDocumentsClient<$Result.GetResult<Prisma.$UserDocumentsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserDocuments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDocumentsFindFirstOrThrowArgs} args - Arguments to find a UserDocuments
     * @example
     * // Get one UserDocuments
     * const userDocuments = await prisma.userDocuments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserDocumentsFindFirstOrThrowArgs>(args?: SelectSubset<T, UserDocumentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserDocumentsClient<$Result.GetResult<Prisma.$UserDocumentsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserDocuments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDocumentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserDocuments
     * const userDocuments = await prisma.userDocuments.findMany()
     * 
     * // Get first 10 UserDocuments
     * const userDocuments = await prisma.userDocuments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userDocumentsWithIdOnly = await prisma.userDocuments.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserDocumentsFindManyArgs>(args?: SelectSubset<T, UserDocumentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserDocumentsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserDocuments.
     * @param {UserDocumentsCreateArgs} args - Arguments to create a UserDocuments.
     * @example
     * // Create one UserDocuments
     * const UserDocuments = await prisma.userDocuments.create({
     *   data: {
     *     // ... data to create a UserDocuments
     *   }
     * })
     * 
     */
    create<T extends UserDocumentsCreateArgs>(args: SelectSubset<T, UserDocumentsCreateArgs<ExtArgs>>): Prisma__UserDocumentsClient<$Result.GetResult<Prisma.$UserDocumentsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserDocuments.
     * @param {UserDocumentsCreateManyArgs} args - Arguments to create many UserDocuments.
     * @example
     * // Create many UserDocuments
     * const userDocuments = await prisma.userDocuments.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserDocumentsCreateManyArgs>(args?: SelectSubset<T, UserDocumentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserDocuments.
     * @param {UserDocumentsDeleteArgs} args - Arguments to delete one UserDocuments.
     * @example
     * // Delete one UserDocuments
     * const UserDocuments = await prisma.userDocuments.delete({
     *   where: {
     *     // ... filter to delete one UserDocuments
     *   }
     * })
     * 
     */
    delete<T extends UserDocumentsDeleteArgs>(args: SelectSubset<T, UserDocumentsDeleteArgs<ExtArgs>>): Prisma__UserDocumentsClient<$Result.GetResult<Prisma.$UserDocumentsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserDocuments.
     * @param {UserDocumentsUpdateArgs} args - Arguments to update one UserDocuments.
     * @example
     * // Update one UserDocuments
     * const userDocuments = await prisma.userDocuments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserDocumentsUpdateArgs>(args: SelectSubset<T, UserDocumentsUpdateArgs<ExtArgs>>): Prisma__UserDocumentsClient<$Result.GetResult<Prisma.$UserDocumentsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserDocuments.
     * @param {UserDocumentsDeleteManyArgs} args - Arguments to filter UserDocuments to delete.
     * @example
     * // Delete a few UserDocuments
     * const { count } = await prisma.userDocuments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDocumentsDeleteManyArgs>(args?: SelectSubset<T, UserDocumentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDocumentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserDocuments
     * const userDocuments = await prisma.userDocuments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserDocumentsUpdateManyArgs>(args: SelectSubset<T, UserDocumentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserDocuments.
     * @param {UserDocumentsUpsertArgs} args - Arguments to update or create a UserDocuments.
     * @example
     * // Update or create a UserDocuments
     * const userDocuments = await prisma.userDocuments.upsert({
     *   create: {
     *     // ... data to create a UserDocuments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserDocuments we want to update
     *   }
     * })
     */
    upsert<T extends UserDocumentsUpsertArgs>(args: SelectSubset<T, UserDocumentsUpsertArgs<ExtArgs>>): Prisma__UserDocumentsClient<$Result.GetResult<Prisma.$UserDocumentsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDocumentsCountArgs} args - Arguments to filter UserDocuments to count.
     * @example
     * // Count the number of UserDocuments
     * const count = await prisma.userDocuments.count({
     *   where: {
     *     // ... the filter for the UserDocuments we want to count
     *   }
     * })
    **/
    count<T extends UserDocumentsCountArgs>(
      args?: Subset<T, UserDocumentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserDocumentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDocumentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserDocumentsAggregateArgs>(args: Subset<T, UserDocumentsAggregateArgs>): Prisma.PrismaPromise<GetUserDocumentsAggregateType<T>>

    /**
     * Group by UserDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDocumentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserDocumentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserDocumentsGroupByArgs['orderBy'] }
        : { orderBy?: UserDocumentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserDocumentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserDocumentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserDocuments model
   */
  readonly fields: UserDocumentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserDocuments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserDocumentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserDocuments model
   */ 
  interface UserDocumentsFieldRefs {
    readonly id: FieldRef<"UserDocuments", 'String'>
    readonly name: FieldRef<"UserDocuments", 'String'>
    readonly url: FieldRef<"UserDocuments", 'String'>
    readonly user_id: FieldRef<"UserDocuments", 'String'>
    readonly created_at: FieldRef<"UserDocuments", 'DateTime'>
    readonly updated_at: FieldRef<"UserDocuments", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserDocuments findUnique
   */
  export type UserDocumentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDocuments
     */
    select?: UserDocumentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDocumentsInclude<ExtArgs> | null
    /**
     * Filter, which UserDocuments to fetch.
     */
    where: UserDocumentsWhereUniqueInput
  }

  /**
   * UserDocuments findUniqueOrThrow
   */
  export type UserDocumentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDocuments
     */
    select?: UserDocumentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDocumentsInclude<ExtArgs> | null
    /**
     * Filter, which UserDocuments to fetch.
     */
    where: UserDocumentsWhereUniqueInput
  }

  /**
   * UserDocuments findFirst
   */
  export type UserDocumentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDocuments
     */
    select?: UserDocumentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDocumentsInclude<ExtArgs> | null
    /**
     * Filter, which UserDocuments to fetch.
     */
    where?: UserDocumentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDocuments to fetch.
     */
    orderBy?: UserDocumentsOrderByWithRelationInput | UserDocumentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserDocuments.
     */
    cursor?: UserDocumentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserDocuments.
     */
    distinct?: UserDocumentsScalarFieldEnum | UserDocumentsScalarFieldEnum[]
  }

  /**
   * UserDocuments findFirstOrThrow
   */
  export type UserDocumentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDocuments
     */
    select?: UserDocumentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDocumentsInclude<ExtArgs> | null
    /**
     * Filter, which UserDocuments to fetch.
     */
    where?: UserDocumentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDocuments to fetch.
     */
    orderBy?: UserDocumentsOrderByWithRelationInput | UserDocumentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserDocuments.
     */
    cursor?: UserDocumentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserDocuments.
     */
    distinct?: UserDocumentsScalarFieldEnum | UserDocumentsScalarFieldEnum[]
  }

  /**
   * UserDocuments findMany
   */
  export type UserDocumentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDocuments
     */
    select?: UserDocumentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDocumentsInclude<ExtArgs> | null
    /**
     * Filter, which UserDocuments to fetch.
     */
    where?: UserDocumentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDocuments to fetch.
     */
    orderBy?: UserDocumentsOrderByWithRelationInput | UserDocumentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserDocuments.
     */
    cursor?: UserDocumentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDocuments.
     */
    skip?: number
    distinct?: UserDocumentsScalarFieldEnum | UserDocumentsScalarFieldEnum[]
  }

  /**
   * UserDocuments create
   */
  export type UserDocumentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDocuments
     */
    select?: UserDocumentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDocumentsInclude<ExtArgs> | null
    /**
     * The data needed to create a UserDocuments.
     */
    data: XOR<UserDocumentsCreateInput, UserDocumentsUncheckedCreateInput>
  }

  /**
   * UserDocuments createMany
   */
  export type UserDocumentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserDocuments.
     */
    data: UserDocumentsCreateManyInput | UserDocumentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserDocuments update
   */
  export type UserDocumentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDocuments
     */
    select?: UserDocumentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDocumentsInclude<ExtArgs> | null
    /**
     * The data needed to update a UserDocuments.
     */
    data: XOR<UserDocumentsUpdateInput, UserDocumentsUncheckedUpdateInput>
    /**
     * Choose, which UserDocuments to update.
     */
    where: UserDocumentsWhereUniqueInput
  }

  /**
   * UserDocuments updateMany
   */
  export type UserDocumentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserDocuments.
     */
    data: XOR<UserDocumentsUpdateManyMutationInput, UserDocumentsUncheckedUpdateManyInput>
    /**
     * Filter which UserDocuments to update
     */
    where?: UserDocumentsWhereInput
  }

  /**
   * UserDocuments upsert
   */
  export type UserDocumentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDocuments
     */
    select?: UserDocumentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDocumentsInclude<ExtArgs> | null
    /**
     * The filter to search for the UserDocuments to update in case it exists.
     */
    where: UserDocumentsWhereUniqueInput
    /**
     * In case the UserDocuments found by the `where` argument doesn't exist, create a new UserDocuments with this data.
     */
    create: XOR<UserDocumentsCreateInput, UserDocumentsUncheckedCreateInput>
    /**
     * In case the UserDocuments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserDocumentsUpdateInput, UserDocumentsUncheckedUpdateInput>
  }

  /**
   * UserDocuments delete
   */
  export type UserDocumentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDocuments
     */
    select?: UserDocumentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDocumentsInclude<ExtArgs> | null
    /**
     * Filter which UserDocuments to delete.
     */
    where: UserDocumentsWhereUniqueInput
  }

  /**
   * UserDocuments deleteMany
   */
  export type UserDocumentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserDocuments to delete
     */
    where?: UserDocumentsWhereInput
  }

  /**
   * UserDocuments without action
   */
  export type UserDocumentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDocuments
     */
    select?: UserDocumentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDocumentsInclude<ExtArgs> | null
  }


  /**
   * Model Abilities
   */

  export type AggregateAbilities = {
    _count: AbilitiesCountAggregateOutputType | null
    _min: AbilitiesMinAggregateOutputType | null
    _max: AbilitiesMaxAggregateOutputType | null
  }

  export type AbilitiesMinAggregateOutputType = {
    id: string | null
    name: string | null
    active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type AbilitiesMaxAggregateOutputType = {
    id: string | null
    name: string | null
    active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type AbilitiesCountAggregateOutputType = {
    id: number
    name: number
    active: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type AbilitiesMinAggregateInputType = {
    id?: true
    name?: true
    active?: true
    created_at?: true
    updated_at?: true
  }

  export type AbilitiesMaxAggregateInputType = {
    id?: true
    name?: true
    active?: true
    created_at?: true
    updated_at?: true
  }

  export type AbilitiesCountAggregateInputType = {
    id?: true
    name?: true
    active?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type AbilitiesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Abilities to aggregate.
     */
    where?: AbilitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Abilities to fetch.
     */
    orderBy?: AbilitiesOrderByWithRelationInput | AbilitiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AbilitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Abilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Abilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Abilities
    **/
    _count?: true | AbilitiesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AbilitiesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AbilitiesMaxAggregateInputType
  }

  export type GetAbilitiesAggregateType<T extends AbilitiesAggregateArgs> = {
        [P in keyof T & keyof AggregateAbilities]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAbilities[P]>
      : GetScalarType<T[P], AggregateAbilities[P]>
  }




  export type AbilitiesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AbilitiesWhereInput
    orderBy?: AbilitiesOrderByWithAggregationInput | AbilitiesOrderByWithAggregationInput[]
    by: AbilitiesScalarFieldEnum[] | AbilitiesScalarFieldEnum
    having?: AbilitiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AbilitiesCountAggregateInputType | true
    _min?: AbilitiesMinAggregateInputType
    _max?: AbilitiesMaxAggregateInputType
  }

  export type AbilitiesGroupByOutputType = {
    id: string
    name: string
    active: boolean
    created_at: Date
    updated_at: Date
    _count: AbilitiesCountAggregateOutputType | null
    _min: AbilitiesMinAggregateOutputType | null
    _max: AbilitiesMaxAggregateOutputType | null
  }

  type GetAbilitiesGroupByPayload<T extends AbilitiesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AbilitiesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AbilitiesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AbilitiesGroupByOutputType[P]>
            : GetScalarType<T[P], AbilitiesGroupByOutputType[P]>
        }
      >
    >


  export type AbilitiesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    active?: boolean
    created_at?: boolean
    updated_at?: boolean
    usersAbilities?: boolean | Abilities$usersAbilitiesArgs<ExtArgs>
    _count?: boolean | AbilitiesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["abilities"]>


  export type AbilitiesSelectScalar = {
    id?: boolean
    name?: boolean
    active?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type AbilitiesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usersAbilities?: boolean | Abilities$usersAbilitiesArgs<ExtArgs>
    _count?: boolean | AbilitiesCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $AbilitiesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Abilities"
    objects: {
      usersAbilities: Prisma.$UsersAbilitiesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      active: boolean
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["abilities"]>
    composites: {}
  }

  type AbilitiesGetPayload<S extends boolean | null | undefined | AbilitiesDefaultArgs> = $Result.GetResult<Prisma.$AbilitiesPayload, S>

  type AbilitiesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AbilitiesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AbilitiesCountAggregateInputType | true
    }

  export interface AbilitiesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Abilities'], meta: { name: 'Abilities' } }
    /**
     * Find zero or one Abilities that matches the filter.
     * @param {AbilitiesFindUniqueArgs} args - Arguments to find a Abilities
     * @example
     * // Get one Abilities
     * const abilities = await prisma.abilities.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AbilitiesFindUniqueArgs>(args: SelectSubset<T, AbilitiesFindUniqueArgs<ExtArgs>>): Prisma__AbilitiesClient<$Result.GetResult<Prisma.$AbilitiesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Abilities that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AbilitiesFindUniqueOrThrowArgs} args - Arguments to find a Abilities
     * @example
     * // Get one Abilities
     * const abilities = await prisma.abilities.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AbilitiesFindUniqueOrThrowArgs>(args: SelectSubset<T, AbilitiesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AbilitiesClient<$Result.GetResult<Prisma.$AbilitiesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Abilities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbilitiesFindFirstArgs} args - Arguments to find a Abilities
     * @example
     * // Get one Abilities
     * const abilities = await prisma.abilities.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AbilitiesFindFirstArgs>(args?: SelectSubset<T, AbilitiesFindFirstArgs<ExtArgs>>): Prisma__AbilitiesClient<$Result.GetResult<Prisma.$AbilitiesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Abilities that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbilitiesFindFirstOrThrowArgs} args - Arguments to find a Abilities
     * @example
     * // Get one Abilities
     * const abilities = await prisma.abilities.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AbilitiesFindFirstOrThrowArgs>(args?: SelectSubset<T, AbilitiesFindFirstOrThrowArgs<ExtArgs>>): Prisma__AbilitiesClient<$Result.GetResult<Prisma.$AbilitiesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Abilities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbilitiesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Abilities
     * const abilities = await prisma.abilities.findMany()
     * 
     * // Get first 10 Abilities
     * const abilities = await prisma.abilities.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const abilitiesWithIdOnly = await prisma.abilities.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AbilitiesFindManyArgs>(args?: SelectSubset<T, AbilitiesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AbilitiesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Abilities.
     * @param {AbilitiesCreateArgs} args - Arguments to create a Abilities.
     * @example
     * // Create one Abilities
     * const Abilities = await prisma.abilities.create({
     *   data: {
     *     // ... data to create a Abilities
     *   }
     * })
     * 
     */
    create<T extends AbilitiesCreateArgs>(args: SelectSubset<T, AbilitiesCreateArgs<ExtArgs>>): Prisma__AbilitiesClient<$Result.GetResult<Prisma.$AbilitiesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Abilities.
     * @param {AbilitiesCreateManyArgs} args - Arguments to create many Abilities.
     * @example
     * // Create many Abilities
     * const abilities = await prisma.abilities.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AbilitiesCreateManyArgs>(args?: SelectSubset<T, AbilitiesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Abilities.
     * @param {AbilitiesDeleteArgs} args - Arguments to delete one Abilities.
     * @example
     * // Delete one Abilities
     * const Abilities = await prisma.abilities.delete({
     *   where: {
     *     // ... filter to delete one Abilities
     *   }
     * })
     * 
     */
    delete<T extends AbilitiesDeleteArgs>(args: SelectSubset<T, AbilitiesDeleteArgs<ExtArgs>>): Prisma__AbilitiesClient<$Result.GetResult<Prisma.$AbilitiesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Abilities.
     * @param {AbilitiesUpdateArgs} args - Arguments to update one Abilities.
     * @example
     * // Update one Abilities
     * const abilities = await prisma.abilities.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AbilitiesUpdateArgs>(args: SelectSubset<T, AbilitiesUpdateArgs<ExtArgs>>): Prisma__AbilitiesClient<$Result.GetResult<Prisma.$AbilitiesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Abilities.
     * @param {AbilitiesDeleteManyArgs} args - Arguments to filter Abilities to delete.
     * @example
     * // Delete a few Abilities
     * const { count } = await prisma.abilities.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AbilitiesDeleteManyArgs>(args?: SelectSubset<T, AbilitiesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Abilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbilitiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Abilities
     * const abilities = await prisma.abilities.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AbilitiesUpdateManyArgs>(args: SelectSubset<T, AbilitiesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Abilities.
     * @param {AbilitiesUpsertArgs} args - Arguments to update or create a Abilities.
     * @example
     * // Update or create a Abilities
     * const abilities = await prisma.abilities.upsert({
     *   create: {
     *     // ... data to create a Abilities
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Abilities we want to update
     *   }
     * })
     */
    upsert<T extends AbilitiesUpsertArgs>(args: SelectSubset<T, AbilitiesUpsertArgs<ExtArgs>>): Prisma__AbilitiesClient<$Result.GetResult<Prisma.$AbilitiesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Abilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbilitiesCountArgs} args - Arguments to filter Abilities to count.
     * @example
     * // Count the number of Abilities
     * const count = await prisma.abilities.count({
     *   where: {
     *     // ... the filter for the Abilities we want to count
     *   }
     * })
    **/
    count<T extends AbilitiesCountArgs>(
      args?: Subset<T, AbilitiesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AbilitiesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Abilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbilitiesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AbilitiesAggregateArgs>(args: Subset<T, AbilitiesAggregateArgs>): Prisma.PrismaPromise<GetAbilitiesAggregateType<T>>

    /**
     * Group by Abilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbilitiesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AbilitiesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AbilitiesGroupByArgs['orderBy'] }
        : { orderBy?: AbilitiesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AbilitiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAbilitiesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Abilities model
   */
  readonly fields: AbilitiesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Abilities.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AbilitiesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usersAbilities<T extends Abilities$usersAbilitiesArgs<ExtArgs> = {}>(args?: Subset<T, Abilities$usersAbilitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersAbilitiesPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Abilities model
   */ 
  interface AbilitiesFieldRefs {
    readonly id: FieldRef<"Abilities", 'String'>
    readonly name: FieldRef<"Abilities", 'String'>
    readonly active: FieldRef<"Abilities", 'Boolean'>
    readonly created_at: FieldRef<"Abilities", 'DateTime'>
    readonly updated_at: FieldRef<"Abilities", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Abilities findUnique
   */
  export type AbilitiesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Abilities
     */
    select?: AbilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbilitiesInclude<ExtArgs> | null
    /**
     * Filter, which Abilities to fetch.
     */
    where: AbilitiesWhereUniqueInput
  }

  /**
   * Abilities findUniqueOrThrow
   */
  export type AbilitiesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Abilities
     */
    select?: AbilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbilitiesInclude<ExtArgs> | null
    /**
     * Filter, which Abilities to fetch.
     */
    where: AbilitiesWhereUniqueInput
  }

  /**
   * Abilities findFirst
   */
  export type AbilitiesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Abilities
     */
    select?: AbilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbilitiesInclude<ExtArgs> | null
    /**
     * Filter, which Abilities to fetch.
     */
    where?: AbilitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Abilities to fetch.
     */
    orderBy?: AbilitiesOrderByWithRelationInput | AbilitiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Abilities.
     */
    cursor?: AbilitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Abilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Abilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Abilities.
     */
    distinct?: AbilitiesScalarFieldEnum | AbilitiesScalarFieldEnum[]
  }

  /**
   * Abilities findFirstOrThrow
   */
  export type AbilitiesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Abilities
     */
    select?: AbilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbilitiesInclude<ExtArgs> | null
    /**
     * Filter, which Abilities to fetch.
     */
    where?: AbilitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Abilities to fetch.
     */
    orderBy?: AbilitiesOrderByWithRelationInput | AbilitiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Abilities.
     */
    cursor?: AbilitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Abilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Abilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Abilities.
     */
    distinct?: AbilitiesScalarFieldEnum | AbilitiesScalarFieldEnum[]
  }

  /**
   * Abilities findMany
   */
  export type AbilitiesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Abilities
     */
    select?: AbilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbilitiesInclude<ExtArgs> | null
    /**
     * Filter, which Abilities to fetch.
     */
    where?: AbilitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Abilities to fetch.
     */
    orderBy?: AbilitiesOrderByWithRelationInput | AbilitiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Abilities.
     */
    cursor?: AbilitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Abilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Abilities.
     */
    skip?: number
    distinct?: AbilitiesScalarFieldEnum | AbilitiesScalarFieldEnum[]
  }

  /**
   * Abilities create
   */
  export type AbilitiesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Abilities
     */
    select?: AbilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbilitiesInclude<ExtArgs> | null
    /**
     * The data needed to create a Abilities.
     */
    data: XOR<AbilitiesCreateInput, AbilitiesUncheckedCreateInput>
  }

  /**
   * Abilities createMany
   */
  export type AbilitiesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Abilities.
     */
    data: AbilitiesCreateManyInput | AbilitiesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Abilities update
   */
  export type AbilitiesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Abilities
     */
    select?: AbilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbilitiesInclude<ExtArgs> | null
    /**
     * The data needed to update a Abilities.
     */
    data: XOR<AbilitiesUpdateInput, AbilitiesUncheckedUpdateInput>
    /**
     * Choose, which Abilities to update.
     */
    where: AbilitiesWhereUniqueInput
  }

  /**
   * Abilities updateMany
   */
  export type AbilitiesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Abilities.
     */
    data: XOR<AbilitiesUpdateManyMutationInput, AbilitiesUncheckedUpdateManyInput>
    /**
     * Filter which Abilities to update
     */
    where?: AbilitiesWhereInput
  }

  /**
   * Abilities upsert
   */
  export type AbilitiesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Abilities
     */
    select?: AbilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbilitiesInclude<ExtArgs> | null
    /**
     * The filter to search for the Abilities to update in case it exists.
     */
    where: AbilitiesWhereUniqueInput
    /**
     * In case the Abilities found by the `where` argument doesn't exist, create a new Abilities with this data.
     */
    create: XOR<AbilitiesCreateInput, AbilitiesUncheckedCreateInput>
    /**
     * In case the Abilities was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AbilitiesUpdateInput, AbilitiesUncheckedUpdateInput>
  }

  /**
   * Abilities delete
   */
  export type AbilitiesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Abilities
     */
    select?: AbilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbilitiesInclude<ExtArgs> | null
    /**
     * Filter which Abilities to delete.
     */
    where: AbilitiesWhereUniqueInput
  }

  /**
   * Abilities deleteMany
   */
  export type AbilitiesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Abilities to delete
     */
    where?: AbilitiesWhereInput
  }

  /**
   * Abilities.usersAbilities
   */
  export type Abilities$usersAbilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersAbilities
     */
    select?: UsersAbilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersAbilitiesInclude<ExtArgs> | null
    where?: UsersAbilitiesWhereInput
    orderBy?: UsersAbilitiesOrderByWithRelationInput | UsersAbilitiesOrderByWithRelationInput[]
    cursor?: UsersAbilitiesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersAbilitiesScalarFieldEnum | UsersAbilitiesScalarFieldEnum[]
  }

  /**
   * Abilities without action
   */
  export type AbilitiesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Abilities
     */
    select?: AbilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbilitiesInclude<ExtArgs> | null
  }


  /**
   * Model UsersAbilities
   */

  export type AggregateUsersAbilities = {
    _count: UsersAbilitiesCountAggregateOutputType | null
    _avg: UsersAbilitiesAvgAggregateOutputType | null
    _sum: UsersAbilitiesSumAggregateOutputType | null
    _min: UsersAbilitiesMinAggregateOutputType | null
    _max: UsersAbilitiesMaxAggregateOutputType | null
  }

  export type UsersAbilitiesAvgAggregateOutputType = {
    years_experience: number | null
  }

  export type UsersAbilitiesSumAggregateOutputType = {
    years_experience: number | null
  }

  export type UsersAbilitiesMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    ability_id: string | null
    years_experience: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersAbilitiesMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    ability_id: string | null
    years_experience: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersAbilitiesCountAggregateOutputType = {
    id: number
    user_id: number
    ability_id: number
    years_experience: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UsersAbilitiesAvgAggregateInputType = {
    years_experience?: true
  }

  export type UsersAbilitiesSumAggregateInputType = {
    years_experience?: true
  }

  export type UsersAbilitiesMinAggregateInputType = {
    id?: true
    user_id?: true
    ability_id?: true
    years_experience?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersAbilitiesMaxAggregateInputType = {
    id?: true
    user_id?: true
    ability_id?: true
    years_experience?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersAbilitiesCountAggregateInputType = {
    id?: true
    user_id?: true
    ability_id?: true
    years_experience?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UsersAbilitiesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsersAbilities to aggregate.
     */
    where?: UsersAbilitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersAbilities to fetch.
     */
    orderBy?: UsersAbilitiesOrderByWithRelationInput | UsersAbilitiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersAbilitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersAbilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersAbilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UsersAbilities
    **/
    _count?: true | UsersAbilitiesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAbilitiesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersAbilitiesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersAbilitiesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersAbilitiesMaxAggregateInputType
  }

  export type GetUsersAbilitiesAggregateType<T extends UsersAbilitiesAggregateArgs> = {
        [P in keyof T & keyof AggregateUsersAbilities]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsersAbilities[P]>
      : GetScalarType<T[P], AggregateUsersAbilities[P]>
  }




  export type UsersAbilitiesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersAbilitiesWhereInput
    orderBy?: UsersAbilitiesOrderByWithAggregationInput | UsersAbilitiesOrderByWithAggregationInput[]
    by: UsersAbilitiesScalarFieldEnum[] | UsersAbilitiesScalarFieldEnum
    having?: UsersAbilitiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersAbilitiesCountAggregateInputType | true
    _avg?: UsersAbilitiesAvgAggregateInputType
    _sum?: UsersAbilitiesSumAggregateInputType
    _min?: UsersAbilitiesMinAggregateInputType
    _max?: UsersAbilitiesMaxAggregateInputType
  }

  export type UsersAbilitiesGroupByOutputType = {
    id: string
    user_id: string
    ability_id: string
    years_experience: number
    created_at: Date
    updated_at: Date
    _count: UsersAbilitiesCountAggregateOutputType | null
    _avg: UsersAbilitiesAvgAggregateOutputType | null
    _sum: UsersAbilitiesSumAggregateOutputType | null
    _min: UsersAbilitiesMinAggregateOutputType | null
    _max: UsersAbilitiesMaxAggregateOutputType | null
  }

  type GetUsersAbilitiesGroupByPayload<T extends UsersAbilitiesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersAbilitiesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersAbilitiesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersAbilitiesGroupByOutputType[P]>
            : GetScalarType<T[P], UsersAbilitiesGroupByOutputType[P]>
        }
      >
    >


  export type UsersAbilitiesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    ability_id?: boolean
    years_experience?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    ability?: boolean | AbilitiesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usersAbilities"]>


  export type UsersAbilitiesSelectScalar = {
    id?: boolean
    user_id?: boolean
    ability_id?: boolean
    years_experience?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type UsersAbilitiesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    ability?: boolean | AbilitiesDefaultArgs<ExtArgs>
  }

  export type $UsersAbilitiesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UsersAbilities"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
      ability: Prisma.$AbilitiesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
      ability_id: string
      years_experience: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["usersAbilities"]>
    composites: {}
  }

  type UsersAbilitiesGetPayload<S extends boolean | null | undefined | UsersAbilitiesDefaultArgs> = $Result.GetResult<Prisma.$UsersAbilitiesPayload, S>

  type UsersAbilitiesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersAbilitiesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersAbilitiesCountAggregateInputType | true
    }

  export interface UsersAbilitiesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UsersAbilities'], meta: { name: 'UsersAbilities' } }
    /**
     * Find zero or one UsersAbilities that matches the filter.
     * @param {UsersAbilitiesFindUniqueArgs} args - Arguments to find a UsersAbilities
     * @example
     * // Get one UsersAbilities
     * const usersAbilities = await prisma.usersAbilities.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsersAbilitiesFindUniqueArgs>(args: SelectSubset<T, UsersAbilitiesFindUniqueArgs<ExtArgs>>): Prisma__UsersAbilitiesClient<$Result.GetResult<Prisma.$UsersAbilitiesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UsersAbilities that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsersAbilitiesFindUniqueOrThrowArgs} args - Arguments to find a UsersAbilities
     * @example
     * // Get one UsersAbilities
     * const usersAbilities = await prisma.usersAbilities.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsersAbilitiesFindUniqueOrThrowArgs>(args: SelectSubset<T, UsersAbilitiesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsersAbilitiesClient<$Result.GetResult<Prisma.$UsersAbilitiesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UsersAbilities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAbilitiesFindFirstArgs} args - Arguments to find a UsersAbilities
     * @example
     * // Get one UsersAbilities
     * const usersAbilities = await prisma.usersAbilities.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsersAbilitiesFindFirstArgs>(args?: SelectSubset<T, UsersAbilitiesFindFirstArgs<ExtArgs>>): Prisma__UsersAbilitiesClient<$Result.GetResult<Prisma.$UsersAbilitiesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UsersAbilities that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAbilitiesFindFirstOrThrowArgs} args - Arguments to find a UsersAbilities
     * @example
     * // Get one UsersAbilities
     * const usersAbilities = await prisma.usersAbilities.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsersAbilitiesFindFirstOrThrowArgs>(args?: SelectSubset<T, UsersAbilitiesFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsersAbilitiesClient<$Result.GetResult<Prisma.$UsersAbilitiesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UsersAbilities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAbilitiesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UsersAbilities
     * const usersAbilities = await prisma.usersAbilities.findMany()
     * 
     * // Get first 10 UsersAbilities
     * const usersAbilities = await prisma.usersAbilities.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersAbilitiesWithIdOnly = await prisma.usersAbilities.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsersAbilitiesFindManyArgs>(args?: SelectSubset<T, UsersAbilitiesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersAbilitiesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UsersAbilities.
     * @param {UsersAbilitiesCreateArgs} args - Arguments to create a UsersAbilities.
     * @example
     * // Create one UsersAbilities
     * const UsersAbilities = await prisma.usersAbilities.create({
     *   data: {
     *     // ... data to create a UsersAbilities
     *   }
     * })
     * 
     */
    create<T extends UsersAbilitiesCreateArgs>(args: SelectSubset<T, UsersAbilitiesCreateArgs<ExtArgs>>): Prisma__UsersAbilitiesClient<$Result.GetResult<Prisma.$UsersAbilitiesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UsersAbilities.
     * @param {UsersAbilitiesCreateManyArgs} args - Arguments to create many UsersAbilities.
     * @example
     * // Create many UsersAbilities
     * const usersAbilities = await prisma.usersAbilities.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsersAbilitiesCreateManyArgs>(args?: SelectSubset<T, UsersAbilitiesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UsersAbilities.
     * @param {UsersAbilitiesDeleteArgs} args - Arguments to delete one UsersAbilities.
     * @example
     * // Delete one UsersAbilities
     * const UsersAbilities = await prisma.usersAbilities.delete({
     *   where: {
     *     // ... filter to delete one UsersAbilities
     *   }
     * })
     * 
     */
    delete<T extends UsersAbilitiesDeleteArgs>(args: SelectSubset<T, UsersAbilitiesDeleteArgs<ExtArgs>>): Prisma__UsersAbilitiesClient<$Result.GetResult<Prisma.$UsersAbilitiesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UsersAbilities.
     * @param {UsersAbilitiesUpdateArgs} args - Arguments to update one UsersAbilities.
     * @example
     * // Update one UsersAbilities
     * const usersAbilities = await prisma.usersAbilities.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsersAbilitiesUpdateArgs>(args: SelectSubset<T, UsersAbilitiesUpdateArgs<ExtArgs>>): Prisma__UsersAbilitiesClient<$Result.GetResult<Prisma.$UsersAbilitiesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UsersAbilities.
     * @param {UsersAbilitiesDeleteManyArgs} args - Arguments to filter UsersAbilities to delete.
     * @example
     * // Delete a few UsersAbilities
     * const { count } = await prisma.usersAbilities.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsersAbilitiesDeleteManyArgs>(args?: SelectSubset<T, UsersAbilitiesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsersAbilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAbilitiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UsersAbilities
     * const usersAbilities = await prisma.usersAbilities.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsersAbilitiesUpdateManyArgs>(args: SelectSubset<T, UsersAbilitiesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UsersAbilities.
     * @param {UsersAbilitiesUpsertArgs} args - Arguments to update or create a UsersAbilities.
     * @example
     * // Update or create a UsersAbilities
     * const usersAbilities = await prisma.usersAbilities.upsert({
     *   create: {
     *     // ... data to create a UsersAbilities
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UsersAbilities we want to update
     *   }
     * })
     */
    upsert<T extends UsersAbilitiesUpsertArgs>(args: SelectSubset<T, UsersAbilitiesUpsertArgs<ExtArgs>>): Prisma__UsersAbilitiesClient<$Result.GetResult<Prisma.$UsersAbilitiesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UsersAbilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAbilitiesCountArgs} args - Arguments to filter UsersAbilities to count.
     * @example
     * // Count the number of UsersAbilities
     * const count = await prisma.usersAbilities.count({
     *   where: {
     *     // ... the filter for the UsersAbilities we want to count
     *   }
     * })
    **/
    count<T extends UsersAbilitiesCountArgs>(
      args?: Subset<T, UsersAbilitiesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersAbilitiesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UsersAbilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAbilitiesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAbilitiesAggregateArgs>(args: Subset<T, UsersAbilitiesAggregateArgs>): Prisma.PrismaPromise<GetUsersAbilitiesAggregateType<T>>

    /**
     * Group by UsersAbilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAbilitiesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersAbilitiesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersAbilitiesGroupByArgs['orderBy'] }
        : { orderBy?: UsersAbilitiesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersAbilitiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersAbilitiesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UsersAbilities model
   */
  readonly fields: UsersAbilitiesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UsersAbilities.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersAbilitiesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    ability<T extends AbilitiesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AbilitiesDefaultArgs<ExtArgs>>): Prisma__AbilitiesClient<$Result.GetResult<Prisma.$AbilitiesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UsersAbilities model
   */ 
  interface UsersAbilitiesFieldRefs {
    readonly id: FieldRef<"UsersAbilities", 'String'>
    readonly user_id: FieldRef<"UsersAbilities", 'String'>
    readonly ability_id: FieldRef<"UsersAbilities", 'String'>
    readonly years_experience: FieldRef<"UsersAbilities", 'Int'>
    readonly created_at: FieldRef<"UsersAbilities", 'DateTime'>
    readonly updated_at: FieldRef<"UsersAbilities", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UsersAbilities findUnique
   */
  export type UsersAbilitiesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersAbilities
     */
    select?: UsersAbilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersAbilitiesInclude<ExtArgs> | null
    /**
     * Filter, which UsersAbilities to fetch.
     */
    where: UsersAbilitiesWhereUniqueInput
  }

  /**
   * UsersAbilities findUniqueOrThrow
   */
  export type UsersAbilitiesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersAbilities
     */
    select?: UsersAbilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersAbilitiesInclude<ExtArgs> | null
    /**
     * Filter, which UsersAbilities to fetch.
     */
    where: UsersAbilitiesWhereUniqueInput
  }

  /**
   * UsersAbilities findFirst
   */
  export type UsersAbilitiesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersAbilities
     */
    select?: UsersAbilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersAbilitiesInclude<ExtArgs> | null
    /**
     * Filter, which UsersAbilities to fetch.
     */
    where?: UsersAbilitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersAbilities to fetch.
     */
    orderBy?: UsersAbilitiesOrderByWithRelationInput | UsersAbilitiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsersAbilities.
     */
    cursor?: UsersAbilitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersAbilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersAbilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsersAbilities.
     */
    distinct?: UsersAbilitiesScalarFieldEnum | UsersAbilitiesScalarFieldEnum[]
  }

  /**
   * UsersAbilities findFirstOrThrow
   */
  export type UsersAbilitiesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersAbilities
     */
    select?: UsersAbilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersAbilitiesInclude<ExtArgs> | null
    /**
     * Filter, which UsersAbilities to fetch.
     */
    where?: UsersAbilitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersAbilities to fetch.
     */
    orderBy?: UsersAbilitiesOrderByWithRelationInput | UsersAbilitiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsersAbilities.
     */
    cursor?: UsersAbilitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersAbilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersAbilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsersAbilities.
     */
    distinct?: UsersAbilitiesScalarFieldEnum | UsersAbilitiesScalarFieldEnum[]
  }

  /**
   * UsersAbilities findMany
   */
  export type UsersAbilitiesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersAbilities
     */
    select?: UsersAbilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersAbilitiesInclude<ExtArgs> | null
    /**
     * Filter, which UsersAbilities to fetch.
     */
    where?: UsersAbilitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersAbilities to fetch.
     */
    orderBy?: UsersAbilitiesOrderByWithRelationInput | UsersAbilitiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UsersAbilities.
     */
    cursor?: UsersAbilitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersAbilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersAbilities.
     */
    skip?: number
    distinct?: UsersAbilitiesScalarFieldEnum | UsersAbilitiesScalarFieldEnum[]
  }

  /**
   * UsersAbilities create
   */
  export type UsersAbilitiesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersAbilities
     */
    select?: UsersAbilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersAbilitiesInclude<ExtArgs> | null
    /**
     * The data needed to create a UsersAbilities.
     */
    data: XOR<UsersAbilitiesCreateInput, UsersAbilitiesUncheckedCreateInput>
  }

  /**
   * UsersAbilities createMany
   */
  export type UsersAbilitiesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UsersAbilities.
     */
    data: UsersAbilitiesCreateManyInput | UsersAbilitiesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UsersAbilities update
   */
  export type UsersAbilitiesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersAbilities
     */
    select?: UsersAbilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersAbilitiesInclude<ExtArgs> | null
    /**
     * The data needed to update a UsersAbilities.
     */
    data: XOR<UsersAbilitiesUpdateInput, UsersAbilitiesUncheckedUpdateInput>
    /**
     * Choose, which UsersAbilities to update.
     */
    where: UsersAbilitiesWhereUniqueInput
  }

  /**
   * UsersAbilities updateMany
   */
  export type UsersAbilitiesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UsersAbilities.
     */
    data: XOR<UsersAbilitiesUpdateManyMutationInput, UsersAbilitiesUncheckedUpdateManyInput>
    /**
     * Filter which UsersAbilities to update
     */
    where?: UsersAbilitiesWhereInput
  }

  /**
   * UsersAbilities upsert
   */
  export type UsersAbilitiesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersAbilities
     */
    select?: UsersAbilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersAbilitiesInclude<ExtArgs> | null
    /**
     * The filter to search for the UsersAbilities to update in case it exists.
     */
    where: UsersAbilitiesWhereUniqueInput
    /**
     * In case the UsersAbilities found by the `where` argument doesn't exist, create a new UsersAbilities with this data.
     */
    create: XOR<UsersAbilitiesCreateInput, UsersAbilitiesUncheckedCreateInput>
    /**
     * In case the UsersAbilities was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersAbilitiesUpdateInput, UsersAbilitiesUncheckedUpdateInput>
  }

  /**
   * UsersAbilities delete
   */
  export type UsersAbilitiesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersAbilities
     */
    select?: UsersAbilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersAbilitiesInclude<ExtArgs> | null
    /**
     * Filter which UsersAbilities to delete.
     */
    where: UsersAbilitiesWhereUniqueInput
  }

  /**
   * UsersAbilities deleteMany
   */
  export type UsersAbilitiesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsersAbilities to delete
     */
    where?: UsersAbilitiesWhereInput
  }

  /**
   * UsersAbilities without action
   */
  export type UsersAbilitiesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersAbilities
     */
    select?: UsersAbilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersAbilitiesInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    name: 'name',
    birthdate: 'birthdate',
    email: 'email',
    password: 'password',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const UserDocumentsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    url: 'url',
    user_id: 'user_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UserDocumentsScalarFieldEnum = (typeof UserDocumentsScalarFieldEnum)[keyof typeof UserDocumentsScalarFieldEnum]


  export const AbilitiesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    active: 'active',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type AbilitiesScalarFieldEnum = (typeof AbilitiesScalarFieldEnum)[keyof typeof AbilitiesScalarFieldEnum]


  export const UsersAbilitiesScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    ability_id: 'ability_id',
    years_experience: 'years_experience',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UsersAbilitiesScalarFieldEnum = (typeof UsersAbilitiesScalarFieldEnum)[keyof typeof UsersAbilitiesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const UsersOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password'
  };

  export type UsersOrderByRelevanceFieldEnum = (typeof UsersOrderByRelevanceFieldEnum)[keyof typeof UsersOrderByRelevanceFieldEnum]


  export const UserDocumentsOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    url: 'url',
    user_id: 'user_id'
  };

  export type UserDocumentsOrderByRelevanceFieldEnum = (typeof UserDocumentsOrderByRelevanceFieldEnum)[keyof typeof UserDocumentsOrderByRelevanceFieldEnum]


  export const AbilitiesOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type AbilitiesOrderByRelevanceFieldEnum = (typeof AbilitiesOrderByRelevanceFieldEnum)[keyof typeof AbilitiesOrderByRelevanceFieldEnum]


  export const UsersAbilitiesOrderByRelevanceFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    ability_id: 'ability_id'
  };

  export type UsersAbilitiesOrderByRelevanceFieldEnum = (typeof UsersAbilitiesOrderByRelevanceFieldEnum)[keyof typeof UsersAbilitiesOrderByRelevanceFieldEnum]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    id?: StringFilter<"Users"> | string
    name?: StringFilter<"Users"> | string
    birthdate?: DateTimeFilter<"Users"> | Date | string
    email?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    created_at?: DateTimeFilter<"Users"> | Date | string
    updated_at?: DateTimeFilter<"Users"> | Date | string
    userDocuments?: UserDocumentsListRelationFilter
    usersAbilities?: UsersAbilitiesListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    birthdate?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    userDocuments?: UserDocumentsOrderByRelationAggregateInput
    usersAbilities?: UsersAbilitiesOrderByRelationAggregateInput
    _relevance?: UsersOrderByRelevanceInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    name?: StringFilter<"Users"> | string
    birthdate?: DateTimeFilter<"Users"> | Date | string
    password?: StringFilter<"Users"> | string
    created_at?: DateTimeFilter<"Users"> | Date | string
    updated_at?: DateTimeFilter<"Users"> | Date | string
    userDocuments?: UserDocumentsListRelationFilter
    usersAbilities?: UsersAbilitiesListRelationFilter
  }, "id" | "email">

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    birthdate?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Users"> | string
    name?: StringWithAggregatesFilter<"Users"> | string
    birthdate?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    email?: StringWithAggregatesFilter<"Users"> | string
    password?: StringWithAggregatesFilter<"Users"> | string
    created_at?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Users"> | Date | string
  }

  export type UserDocumentsWhereInput = {
    AND?: UserDocumentsWhereInput | UserDocumentsWhereInput[]
    OR?: UserDocumentsWhereInput[]
    NOT?: UserDocumentsWhereInput | UserDocumentsWhereInput[]
    id?: StringFilter<"UserDocuments"> | string
    name?: StringFilter<"UserDocuments"> | string
    url?: StringFilter<"UserDocuments"> | string
    user_id?: StringFilter<"UserDocuments"> | string
    created_at?: DateTimeFilter<"UserDocuments"> | Date | string
    updated_at?: DateTimeFilter<"UserDocuments"> | Date | string
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }

  export type UserDocumentsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    user?: UsersOrderByWithRelationInput
    _relevance?: UserDocumentsOrderByRelevanceInput
  }

  export type UserDocumentsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserDocumentsWhereInput | UserDocumentsWhereInput[]
    OR?: UserDocumentsWhereInput[]
    NOT?: UserDocumentsWhereInput | UserDocumentsWhereInput[]
    name?: StringFilter<"UserDocuments"> | string
    url?: StringFilter<"UserDocuments"> | string
    user_id?: StringFilter<"UserDocuments"> | string
    created_at?: DateTimeFilter<"UserDocuments"> | Date | string
    updated_at?: DateTimeFilter<"UserDocuments"> | Date | string
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }, "id">

  export type UserDocumentsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: UserDocumentsCountOrderByAggregateInput
    _max?: UserDocumentsMaxOrderByAggregateInput
    _min?: UserDocumentsMinOrderByAggregateInput
  }

  export type UserDocumentsScalarWhereWithAggregatesInput = {
    AND?: UserDocumentsScalarWhereWithAggregatesInput | UserDocumentsScalarWhereWithAggregatesInput[]
    OR?: UserDocumentsScalarWhereWithAggregatesInput[]
    NOT?: UserDocumentsScalarWhereWithAggregatesInput | UserDocumentsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserDocuments"> | string
    name?: StringWithAggregatesFilter<"UserDocuments"> | string
    url?: StringWithAggregatesFilter<"UserDocuments"> | string
    user_id?: StringWithAggregatesFilter<"UserDocuments"> | string
    created_at?: DateTimeWithAggregatesFilter<"UserDocuments"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"UserDocuments"> | Date | string
  }

  export type AbilitiesWhereInput = {
    AND?: AbilitiesWhereInput | AbilitiesWhereInput[]
    OR?: AbilitiesWhereInput[]
    NOT?: AbilitiesWhereInput | AbilitiesWhereInput[]
    id?: StringFilter<"Abilities"> | string
    name?: StringFilter<"Abilities"> | string
    active?: BoolFilter<"Abilities"> | boolean
    created_at?: DateTimeFilter<"Abilities"> | Date | string
    updated_at?: DateTimeFilter<"Abilities"> | Date | string
    usersAbilities?: UsersAbilitiesListRelationFilter
  }

  export type AbilitiesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    usersAbilities?: UsersAbilitiesOrderByRelationAggregateInput
    _relevance?: AbilitiesOrderByRelevanceInput
  }

  export type AbilitiesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AbilitiesWhereInput | AbilitiesWhereInput[]
    OR?: AbilitiesWhereInput[]
    NOT?: AbilitiesWhereInput | AbilitiesWhereInput[]
    name?: StringFilter<"Abilities"> | string
    active?: BoolFilter<"Abilities"> | boolean
    created_at?: DateTimeFilter<"Abilities"> | Date | string
    updated_at?: DateTimeFilter<"Abilities"> | Date | string
    usersAbilities?: UsersAbilitiesListRelationFilter
  }, "id">

  export type AbilitiesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: AbilitiesCountOrderByAggregateInput
    _max?: AbilitiesMaxOrderByAggregateInput
    _min?: AbilitiesMinOrderByAggregateInput
  }

  export type AbilitiesScalarWhereWithAggregatesInput = {
    AND?: AbilitiesScalarWhereWithAggregatesInput | AbilitiesScalarWhereWithAggregatesInput[]
    OR?: AbilitiesScalarWhereWithAggregatesInput[]
    NOT?: AbilitiesScalarWhereWithAggregatesInput | AbilitiesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Abilities"> | string
    name?: StringWithAggregatesFilter<"Abilities"> | string
    active?: BoolWithAggregatesFilter<"Abilities"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"Abilities"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Abilities"> | Date | string
  }

  export type UsersAbilitiesWhereInput = {
    AND?: UsersAbilitiesWhereInput | UsersAbilitiesWhereInput[]
    OR?: UsersAbilitiesWhereInput[]
    NOT?: UsersAbilitiesWhereInput | UsersAbilitiesWhereInput[]
    id?: StringFilter<"UsersAbilities"> | string
    user_id?: StringFilter<"UsersAbilities"> | string
    ability_id?: StringFilter<"UsersAbilities"> | string
    years_experience?: IntFilter<"UsersAbilities"> | number
    created_at?: DateTimeFilter<"UsersAbilities"> | Date | string
    updated_at?: DateTimeFilter<"UsersAbilities"> | Date | string
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    ability?: XOR<AbilitiesScalarRelationFilter, AbilitiesWhereInput>
  }

  export type UsersAbilitiesOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    ability_id?: SortOrder
    years_experience?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    user?: UsersOrderByWithRelationInput
    ability?: AbilitiesOrderByWithRelationInput
    _relevance?: UsersAbilitiesOrderByRelevanceInput
  }

  export type UsersAbilitiesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    user_id_ability_id?: UsersAbilitiesUser_idAbility_idCompoundUniqueInput
    AND?: UsersAbilitiesWhereInput | UsersAbilitiesWhereInput[]
    OR?: UsersAbilitiesWhereInput[]
    NOT?: UsersAbilitiesWhereInput | UsersAbilitiesWhereInput[]
    user_id?: StringFilter<"UsersAbilities"> | string
    ability_id?: StringFilter<"UsersAbilities"> | string
    years_experience?: IntFilter<"UsersAbilities"> | number
    created_at?: DateTimeFilter<"UsersAbilities"> | Date | string
    updated_at?: DateTimeFilter<"UsersAbilities"> | Date | string
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    ability?: XOR<AbilitiesScalarRelationFilter, AbilitiesWhereInput>
  }, "id" | "user_id_ability_id">

  export type UsersAbilitiesOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    ability_id?: SortOrder
    years_experience?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: UsersAbilitiesCountOrderByAggregateInput
    _avg?: UsersAbilitiesAvgOrderByAggregateInput
    _max?: UsersAbilitiesMaxOrderByAggregateInput
    _min?: UsersAbilitiesMinOrderByAggregateInput
    _sum?: UsersAbilitiesSumOrderByAggregateInput
  }

  export type UsersAbilitiesScalarWhereWithAggregatesInput = {
    AND?: UsersAbilitiesScalarWhereWithAggregatesInput | UsersAbilitiesScalarWhereWithAggregatesInput[]
    OR?: UsersAbilitiesScalarWhereWithAggregatesInput[]
    NOT?: UsersAbilitiesScalarWhereWithAggregatesInput | UsersAbilitiesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UsersAbilities"> | string
    user_id?: StringWithAggregatesFilter<"UsersAbilities"> | string
    ability_id?: StringWithAggregatesFilter<"UsersAbilities"> | string
    years_experience?: IntWithAggregatesFilter<"UsersAbilities"> | number
    created_at?: DateTimeWithAggregatesFilter<"UsersAbilities"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"UsersAbilities"> | Date | string
  }

  export type UsersCreateInput = {
    id?: string
    name: string
    birthdate: Date | string
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    userDocuments?: UserDocumentsCreateNestedManyWithoutUserInput
    usersAbilities?: UsersAbilitiesCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateInput = {
    id?: string
    name: string
    birthdate: Date | string
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    userDocuments?: UserDocumentsUncheckedCreateNestedManyWithoutUserInput
    usersAbilities?: UsersAbilitiesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userDocuments?: UserDocumentsUpdateManyWithoutUserNestedInput
    usersAbilities?: UsersAbilitiesUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userDocuments?: UserDocumentsUncheckedUpdateManyWithoutUserNestedInput
    usersAbilities?: UsersAbilitiesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersCreateManyInput = {
    id?: string
    name: string
    birthdate: Date | string
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UsersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserDocumentsCreateInput = {
    id?: string
    name: string
    url: string
    created_at?: Date | string
    updated_at?: Date | string
    user: UsersCreateNestedOneWithoutUserDocumentsInput
  }

  export type UserDocumentsUncheckedCreateInput = {
    id?: string
    name: string
    url: string
    user_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserDocumentsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutUserDocumentsNestedInput
  }

  export type UserDocumentsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserDocumentsCreateManyInput = {
    id?: string
    name: string
    url: string
    user_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserDocumentsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserDocumentsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbilitiesCreateInput = {
    id?: string
    name: string
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    usersAbilities?: UsersAbilitiesCreateNestedManyWithoutAbilityInput
  }

  export type AbilitiesUncheckedCreateInput = {
    id?: string
    name: string
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    usersAbilities?: UsersAbilitiesUncheckedCreateNestedManyWithoutAbilityInput
  }

  export type AbilitiesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    usersAbilities?: UsersAbilitiesUpdateManyWithoutAbilityNestedInput
  }

  export type AbilitiesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    usersAbilities?: UsersAbilitiesUncheckedUpdateManyWithoutAbilityNestedInput
  }

  export type AbilitiesCreateManyInput = {
    id?: string
    name: string
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AbilitiesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbilitiesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersAbilitiesCreateInput = {
    id?: string
    years_experience: number
    created_at?: Date | string
    updated_at?: Date | string
    user: UsersCreateNestedOneWithoutUsersAbilitiesInput
    ability: AbilitiesCreateNestedOneWithoutUsersAbilitiesInput
  }

  export type UsersAbilitiesUncheckedCreateInput = {
    id?: string
    user_id: string
    ability_id: string
    years_experience: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UsersAbilitiesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    years_experience?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutUsersAbilitiesNestedInput
    ability?: AbilitiesUpdateOneRequiredWithoutUsersAbilitiesNestedInput
  }

  export type UsersAbilitiesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    ability_id?: StringFieldUpdateOperationsInput | string
    years_experience?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersAbilitiesCreateManyInput = {
    id?: string
    user_id: string
    ability_id: string
    years_experience: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UsersAbilitiesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    years_experience?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersAbilitiesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    ability_id?: StringFieldUpdateOperationsInput | string
    years_experience?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserDocumentsListRelationFilter = {
    every?: UserDocumentsWhereInput
    some?: UserDocumentsWhereInput
    none?: UserDocumentsWhereInput
  }

  export type UsersAbilitiesListRelationFilter = {
    every?: UsersAbilitiesWhereInput
    some?: UsersAbilitiesWhereInput
    none?: UsersAbilitiesWhereInput
  }

  export type UserDocumentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersAbilitiesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersOrderByRelevanceInput = {
    fields: UsersOrderByRelevanceFieldEnum | UsersOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    birthdate?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    birthdate?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    birthdate?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UsersScalarRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type UserDocumentsOrderByRelevanceInput = {
    fields: UserDocumentsOrderByRelevanceFieldEnum | UserDocumentsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserDocumentsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserDocumentsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserDocumentsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type AbilitiesOrderByRelevanceInput = {
    fields: AbilitiesOrderByRelevanceFieldEnum | AbilitiesOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AbilitiesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type AbilitiesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type AbilitiesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type AbilitiesScalarRelationFilter = {
    is?: AbilitiesWhereInput
    isNot?: AbilitiesWhereInput
  }

  export type UsersAbilitiesOrderByRelevanceInput = {
    fields: UsersAbilitiesOrderByRelevanceFieldEnum | UsersAbilitiesOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UsersAbilitiesUser_idAbility_idCompoundUniqueInput = {
    user_id: string
    ability_id: string
  }

  export type UsersAbilitiesCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    ability_id?: SortOrder
    years_experience?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UsersAbilitiesAvgOrderByAggregateInput = {
    years_experience?: SortOrder
  }

  export type UsersAbilitiesMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    ability_id?: SortOrder
    years_experience?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UsersAbilitiesMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    ability_id?: SortOrder
    years_experience?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UsersAbilitiesSumOrderByAggregateInput = {
    years_experience?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type UserDocumentsCreateNestedManyWithoutUserInput = {
    create?: XOR<UserDocumentsCreateWithoutUserInput, UserDocumentsUncheckedCreateWithoutUserInput> | UserDocumentsCreateWithoutUserInput[] | UserDocumentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserDocumentsCreateOrConnectWithoutUserInput | UserDocumentsCreateOrConnectWithoutUserInput[]
    createMany?: UserDocumentsCreateManyUserInputEnvelope
    connect?: UserDocumentsWhereUniqueInput | UserDocumentsWhereUniqueInput[]
  }

  export type UsersAbilitiesCreateNestedManyWithoutUserInput = {
    create?: XOR<UsersAbilitiesCreateWithoutUserInput, UsersAbilitiesUncheckedCreateWithoutUserInput> | UsersAbilitiesCreateWithoutUserInput[] | UsersAbilitiesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UsersAbilitiesCreateOrConnectWithoutUserInput | UsersAbilitiesCreateOrConnectWithoutUserInput[]
    createMany?: UsersAbilitiesCreateManyUserInputEnvelope
    connect?: UsersAbilitiesWhereUniqueInput | UsersAbilitiesWhereUniqueInput[]
  }

  export type UserDocumentsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserDocumentsCreateWithoutUserInput, UserDocumentsUncheckedCreateWithoutUserInput> | UserDocumentsCreateWithoutUserInput[] | UserDocumentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserDocumentsCreateOrConnectWithoutUserInput | UserDocumentsCreateOrConnectWithoutUserInput[]
    createMany?: UserDocumentsCreateManyUserInputEnvelope
    connect?: UserDocumentsWhereUniqueInput | UserDocumentsWhereUniqueInput[]
  }

  export type UsersAbilitiesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UsersAbilitiesCreateWithoutUserInput, UsersAbilitiesUncheckedCreateWithoutUserInput> | UsersAbilitiesCreateWithoutUserInput[] | UsersAbilitiesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UsersAbilitiesCreateOrConnectWithoutUserInput | UsersAbilitiesCreateOrConnectWithoutUserInput[]
    createMany?: UsersAbilitiesCreateManyUserInputEnvelope
    connect?: UsersAbilitiesWhereUniqueInput | UsersAbilitiesWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserDocumentsUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserDocumentsCreateWithoutUserInput, UserDocumentsUncheckedCreateWithoutUserInput> | UserDocumentsCreateWithoutUserInput[] | UserDocumentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserDocumentsCreateOrConnectWithoutUserInput | UserDocumentsCreateOrConnectWithoutUserInput[]
    upsert?: UserDocumentsUpsertWithWhereUniqueWithoutUserInput | UserDocumentsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserDocumentsCreateManyUserInputEnvelope
    set?: UserDocumentsWhereUniqueInput | UserDocumentsWhereUniqueInput[]
    disconnect?: UserDocumentsWhereUniqueInput | UserDocumentsWhereUniqueInput[]
    delete?: UserDocumentsWhereUniqueInput | UserDocumentsWhereUniqueInput[]
    connect?: UserDocumentsWhereUniqueInput | UserDocumentsWhereUniqueInput[]
    update?: UserDocumentsUpdateWithWhereUniqueWithoutUserInput | UserDocumentsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserDocumentsUpdateManyWithWhereWithoutUserInput | UserDocumentsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserDocumentsScalarWhereInput | UserDocumentsScalarWhereInput[]
  }

  export type UsersAbilitiesUpdateManyWithoutUserNestedInput = {
    create?: XOR<UsersAbilitiesCreateWithoutUserInput, UsersAbilitiesUncheckedCreateWithoutUserInput> | UsersAbilitiesCreateWithoutUserInput[] | UsersAbilitiesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UsersAbilitiesCreateOrConnectWithoutUserInput | UsersAbilitiesCreateOrConnectWithoutUserInput[]
    upsert?: UsersAbilitiesUpsertWithWhereUniqueWithoutUserInput | UsersAbilitiesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UsersAbilitiesCreateManyUserInputEnvelope
    set?: UsersAbilitiesWhereUniqueInput | UsersAbilitiesWhereUniqueInput[]
    disconnect?: UsersAbilitiesWhereUniqueInput | UsersAbilitiesWhereUniqueInput[]
    delete?: UsersAbilitiesWhereUniqueInput | UsersAbilitiesWhereUniqueInput[]
    connect?: UsersAbilitiesWhereUniqueInput | UsersAbilitiesWhereUniqueInput[]
    update?: UsersAbilitiesUpdateWithWhereUniqueWithoutUserInput | UsersAbilitiesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UsersAbilitiesUpdateManyWithWhereWithoutUserInput | UsersAbilitiesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UsersAbilitiesScalarWhereInput | UsersAbilitiesScalarWhereInput[]
  }

  export type UserDocumentsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserDocumentsCreateWithoutUserInput, UserDocumentsUncheckedCreateWithoutUserInput> | UserDocumentsCreateWithoutUserInput[] | UserDocumentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserDocumentsCreateOrConnectWithoutUserInput | UserDocumentsCreateOrConnectWithoutUserInput[]
    upsert?: UserDocumentsUpsertWithWhereUniqueWithoutUserInput | UserDocumentsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserDocumentsCreateManyUserInputEnvelope
    set?: UserDocumentsWhereUniqueInput | UserDocumentsWhereUniqueInput[]
    disconnect?: UserDocumentsWhereUniqueInput | UserDocumentsWhereUniqueInput[]
    delete?: UserDocumentsWhereUniqueInput | UserDocumentsWhereUniqueInput[]
    connect?: UserDocumentsWhereUniqueInput | UserDocumentsWhereUniqueInput[]
    update?: UserDocumentsUpdateWithWhereUniqueWithoutUserInput | UserDocumentsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserDocumentsUpdateManyWithWhereWithoutUserInput | UserDocumentsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserDocumentsScalarWhereInput | UserDocumentsScalarWhereInput[]
  }

  export type UsersAbilitiesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UsersAbilitiesCreateWithoutUserInput, UsersAbilitiesUncheckedCreateWithoutUserInput> | UsersAbilitiesCreateWithoutUserInput[] | UsersAbilitiesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UsersAbilitiesCreateOrConnectWithoutUserInput | UsersAbilitiesCreateOrConnectWithoutUserInput[]
    upsert?: UsersAbilitiesUpsertWithWhereUniqueWithoutUserInput | UsersAbilitiesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UsersAbilitiesCreateManyUserInputEnvelope
    set?: UsersAbilitiesWhereUniqueInput | UsersAbilitiesWhereUniqueInput[]
    disconnect?: UsersAbilitiesWhereUniqueInput | UsersAbilitiesWhereUniqueInput[]
    delete?: UsersAbilitiesWhereUniqueInput | UsersAbilitiesWhereUniqueInput[]
    connect?: UsersAbilitiesWhereUniqueInput | UsersAbilitiesWhereUniqueInput[]
    update?: UsersAbilitiesUpdateWithWhereUniqueWithoutUserInput | UsersAbilitiesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UsersAbilitiesUpdateManyWithWhereWithoutUserInput | UsersAbilitiesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UsersAbilitiesScalarWhereInput | UsersAbilitiesScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutUserDocumentsInput = {
    create?: XOR<UsersCreateWithoutUserDocumentsInput, UsersUncheckedCreateWithoutUserDocumentsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutUserDocumentsInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutUserDocumentsNestedInput = {
    create?: XOR<UsersCreateWithoutUserDocumentsInput, UsersUncheckedCreateWithoutUserDocumentsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutUserDocumentsInput
    upsert?: UsersUpsertWithoutUserDocumentsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutUserDocumentsInput, UsersUpdateWithoutUserDocumentsInput>, UsersUncheckedUpdateWithoutUserDocumentsInput>
  }

  export type UsersAbilitiesCreateNestedManyWithoutAbilityInput = {
    create?: XOR<UsersAbilitiesCreateWithoutAbilityInput, UsersAbilitiesUncheckedCreateWithoutAbilityInput> | UsersAbilitiesCreateWithoutAbilityInput[] | UsersAbilitiesUncheckedCreateWithoutAbilityInput[]
    connectOrCreate?: UsersAbilitiesCreateOrConnectWithoutAbilityInput | UsersAbilitiesCreateOrConnectWithoutAbilityInput[]
    createMany?: UsersAbilitiesCreateManyAbilityInputEnvelope
    connect?: UsersAbilitiesWhereUniqueInput | UsersAbilitiesWhereUniqueInput[]
  }

  export type UsersAbilitiesUncheckedCreateNestedManyWithoutAbilityInput = {
    create?: XOR<UsersAbilitiesCreateWithoutAbilityInput, UsersAbilitiesUncheckedCreateWithoutAbilityInput> | UsersAbilitiesCreateWithoutAbilityInput[] | UsersAbilitiesUncheckedCreateWithoutAbilityInput[]
    connectOrCreate?: UsersAbilitiesCreateOrConnectWithoutAbilityInput | UsersAbilitiesCreateOrConnectWithoutAbilityInput[]
    createMany?: UsersAbilitiesCreateManyAbilityInputEnvelope
    connect?: UsersAbilitiesWhereUniqueInput | UsersAbilitiesWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UsersAbilitiesUpdateManyWithoutAbilityNestedInput = {
    create?: XOR<UsersAbilitiesCreateWithoutAbilityInput, UsersAbilitiesUncheckedCreateWithoutAbilityInput> | UsersAbilitiesCreateWithoutAbilityInput[] | UsersAbilitiesUncheckedCreateWithoutAbilityInput[]
    connectOrCreate?: UsersAbilitiesCreateOrConnectWithoutAbilityInput | UsersAbilitiesCreateOrConnectWithoutAbilityInput[]
    upsert?: UsersAbilitiesUpsertWithWhereUniqueWithoutAbilityInput | UsersAbilitiesUpsertWithWhereUniqueWithoutAbilityInput[]
    createMany?: UsersAbilitiesCreateManyAbilityInputEnvelope
    set?: UsersAbilitiesWhereUniqueInput | UsersAbilitiesWhereUniqueInput[]
    disconnect?: UsersAbilitiesWhereUniqueInput | UsersAbilitiesWhereUniqueInput[]
    delete?: UsersAbilitiesWhereUniqueInput | UsersAbilitiesWhereUniqueInput[]
    connect?: UsersAbilitiesWhereUniqueInput | UsersAbilitiesWhereUniqueInput[]
    update?: UsersAbilitiesUpdateWithWhereUniqueWithoutAbilityInput | UsersAbilitiesUpdateWithWhereUniqueWithoutAbilityInput[]
    updateMany?: UsersAbilitiesUpdateManyWithWhereWithoutAbilityInput | UsersAbilitiesUpdateManyWithWhereWithoutAbilityInput[]
    deleteMany?: UsersAbilitiesScalarWhereInput | UsersAbilitiesScalarWhereInput[]
  }

  export type UsersAbilitiesUncheckedUpdateManyWithoutAbilityNestedInput = {
    create?: XOR<UsersAbilitiesCreateWithoutAbilityInput, UsersAbilitiesUncheckedCreateWithoutAbilityInput> | UsersAbilitiesCreateWithoutAbilityInput[] | UsersAbilitiesUncheckedCreateWithoutAbilityInput[]
    connectOrCreate?: UsersAbilitiesCreateOrConnectWithoutAbilityInput | UsersAbilitiesCreateOrConnectWithoutAbilityInput[]
    upsert?: UsersAbilitiesUpsertWithWhereUniqueWithoutAbilityInput | UsersAbilitiesUpsertWithWhereUniqueWithoutAbilityInput[]
    createMany?: UsersAbilitiesCreateManyAbilityInputEnvelope
    set?: UsersAbilitiesWhereUniqueInput | UsersAbilitiesWhereUniqueInput[]
    disconnect?: UsersAbilitiesWhereUniqueInput | UsersAbilitiesWhereUniqueInput[]
    delete?: UsersAbilitiesWhereUniqueInput | UsersAbilitiesWhereUniqueInput[]
    connect?: UsersAbilitiesWhereUniqueInput | UsersAbilitiesWhereUniqueInput[]
    update?: UsersAbilitiesUpdateWithWhereUniqueWithoutAbilityInput | UsersAbilitiesUpdateWithWhereUniqueWithoutAbilityInput[]
    updateMany?: UsersAbilitiesUpdateManyWithWhereWithoutAbilityInput | UsersAbilitiesUpdateManyWithWhereWithoutAbilityInput[]
    deleteMany?: UsersAbilitiesScalarWhereInput | UsersAbilitiesScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutUsersAbilitiesInput = {
    create?: XOR<UsersCreateWithoutUsersAbilitiesInput, UsersUncheckedCreateWithoutUsersAbilitiesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutUsersAbilitiesInput
    connect?: UsersWhereUniqueInput
  }

  export type AbilitiesCreateNestedOneWithoutUsersAbilitiesInput = {
    create?: XOR<AbilitiesCreateWithoutUsersAbilitiesInput, AbilitiesUncheckedCreateWithoutUsersAbilitiesInput>
    connectOrCreate?: AbilitiesCreateOrConnectWithoutUsersAbilitiesInput
    connect?: AbilitiesWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UsersUpdateOneRequiredWithoutUsersAbilitiesNestedInput = {
    create?: XOR<UsersCreateWithoutUsersAbilitiesInput, UsersUncheckedCreateWithoutUsersAbilitiesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutUsersAbilitiesInput
    upsert?: UsersUpsertWithoutUsersAbilitiesInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutUsersAbilitiesInput, UsersUpdateWithoutUsersAbilitiesInput>, UsersUncheckedUpdateWithoutUsersAbilitiesInput>
  }

  export type AbilitiesUpdateOneRequiredWithoutUsersAbilitiesNestedInput = {
    create?: XOR<AbilitiesCreateWithoutUsersAbilitiesInput, AbilitiesUncheckedCreateWithoutUsersAbilitiesInput>
    connectOrCreate?: AbilitiesCreateOrConnectWithoutUsersAbilitiesInput
    upsert?: AbilitiesUpsertWithoutUsersAbilitiesInput
    connect?: AbilitiesWhereUniqueInput
    update?: XOR<XOR<AbilitiesUpdateToOneWithWhereWithoutUsersAbilitiesInput, AbilitiesUpdateWithoutUsersAbilitiesInput>, AbilitiesUncheckedUpdateWithoutUsersAbilitiesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UserDocumentsCreateWithoutUserInput = {
    id?: string
    name: string
    url: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserDocumentsUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    url: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserDocumentsCreateOrConnectWithoutUserInput = {
    where: UserDocumentsWhereUniqueInput
    create: XOR<UserDocumentsCreateWithoutUserInput, UserDocumentsUncheckedCreateWithoutUserInput>
  }

  export type UserDocumentsCreateManyUserInputEnvelope = {
    data: UserDocumentsCreateManyUserInput | UserDocumentsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UsersAbilitiesCreateWithoutUserInput = {
    id?: string
    years_experience: number
    created_at?: Date | string
    updated_at?: Date | string
    ability: AbilitiesCreateNestedOneWithoutUsersAbilitiesInput
  }

  export type UsersAbilitiesUncheckedCreateWithoutUserInput = {
    id?: string
    ability_id: string
    years_experience: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UsersAbilitiesCreateOrConnectWithoutUserInput = {
    where: UsersAbilitiesWhereUniqueInput
    create: XOR<UsersAbilitiesCreateWithoutUserInput, UsersAbilitiesUncheckedCreateWithoutUserInput>
  }

  export type UsersAbilitiesCreateManyUserInputEnvelope = {
    data: UsersAbilitiesCreateManyUserInput | UsersAbilitiesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserDocumentsUpsertWithWhereUniqueWithoutUserInput = {
    where: UserDocumentsWhereUniqueInput
    update: XOR<UserDocumentsUpdateWithoutUserInput, UserDocumentsUncheckedUpdateWithoutUserInput>
    create: XOR<UserDocumentsCreateWithoutUserInput, UserDocumentsUncheckedCreateWithoutUserInput>
  }

  export type UserDocumentsUpdateWithWhereUniqueWithoutUserInput = {
    where: UserDocumentsWhereUniqueInput
    data: XOR<UserDocumentsUpdateWithoutUserInput, UserDocumentsUncheckedUpdateWithoutUserInput>
  }

  export type UserDocumentsUpdateManyWithWhereWithoutUserInput = {
    where: UserDocumentsScalarWhereInput
    data: XOR<UserDocumentsUpdateManyMutationInput, UserDocumentsUncheckedUpdateManyWithoutUserInput>
  }

  export type UserDocumentsScalarWhereInput = {
    AND?: UserDocumentsScalarWhereInput | UserDocumentsScalarWhereInput[]
    OR?: UserDocumentsScalarWhereInput[]
    NOT?: UserDocumentsScalarWhereInput | UserDocumentsScalarWhereInput[]
    id?: StringFilter<"UserDocuments"> | string
    name?: StringFilter<"UserDocuments"> | string
    url?: StringFilter<"UserDocuments"> | string
    user_id?: StringFilter<"UserDocuments"> | string
    created_at?: DateTimeFilter<"UserDocuments"> | Date | string
    updated_at?: DateTimeFilter<"UserDocuments"> | Date | string
  }

  export type UsersAbilitiesUpsertWithWhereUniqueWithoutUserInput = {
    where: UsersAbilitiesWhereUniqueInput
    update: XOR<UsersAbilitiesUpdateWithoutUserInput, UsersAbilitiesUncheckedUpdateWithoutUserInput>
    create: XOR<UsersAbilitiesCreateWithoutUserInput, UsersAbilitiesUncheckedCreateWithoutUserInput>
  }

  export type UsersAbilitiesUpdateWithWhereUniqueWithoutUserInput = {
    where: UsersAbilitiesWhereUniqueInput
    data: XOR<UsersAbilitiesUpdateWithoutUserInput, UsersAbilitiesUncheckedUpdateWithoutUserInput>
  }

  export type UsersAbilitiesUpdateManyWithWhereWithoutUserInput = {
    where: UsersAbilitiesScalarWhereInput
    data: XOR<UsersAbilitiesUpdateManyMutationInput, UsersAbilitiesUncheckedUpdateManyWithoutUserInput>
  }

  export type UsersAbilitiesScalarWhereInput = {
    AND?: UsersAbilitiesScalarWhereInput | UsersAbilitiesScalarWhereInput[]
    OR?: UsersAbilitiesScalarWhereInput[]
    NOT?: UsersAbilitiesScalarWhereInput | UsersAbilitiesScalarWhereInput[]
    id?: StringFilter<"UsersAbilities"> | string
    user_id?: StringFilter<"UsersAbilities"> | string
    ability_id?: StringFilter<"UsersAbilities"> | string
    years_experience?: IntFilter<"UsersAbilities"> | number
    created_at?: DateTimeFilter<"UsersAbilities"> | Date | string
    updated_at?: DateTimeFilter<"UsersAbilities"> | Date | string
  }

  export type UsersCreateWithoutUserDocumentsInput = {
    id?: string
    name: string
    birthdate: Date | string
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    usersAbilities?: UsersAbilitiesCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutUserDocumentsInput = {
    id?: string
    name: string
    birthdate: Date | string
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    usersAbilities?: UsersAbilitiesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutUserDocumentsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutUserDocumentsInput, UsersUncheckedCreateWithoutUserDocumentsInput>
  }

  export type UsersUpsertWithoutUserDocumentsInput = {
    update: XOR<UsersUpdateWithoutUserDocumentsInput, UsersUncheckedUpdateWithoutUserDocumentsInput>
    create: XOR<UsersCreateWithoutUserDocumentsInput, UsersUncheckedCreateWithoutUserDocumentsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutUserDocumentsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutUserDocumentsInput, UsersUncheckedUpdateWithoutUserDocumentsInput>
  }

  export type UsersUpdateWithoutUserDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    usersAbilities?: UsersAbilitiesUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutUserDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    usersAbilities?: UsersAbilitiesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersAbilitiesCreateWithoutAbilityInput = {
    id?: string
    years_experience: number
    created_at?: Date | string
    updated_at?: Date | string
    user: UsersCreateNestedOneWithoutUsersAbilitiesInput
  }

  export type UsersAbilitiesUncheckedCreateWithoutAbilityInput = {
    id?: string
    user_id: string
    years_experience: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UsersAbilitiesCreateOrConnectWithoutAbilityInput = {
    where: UsersAbilitiesWhereUniqueInput
    create: XOR<UsersAbilitiesCreateWithoutAbilityInput, UsersAbilitiesUncheckedCreateWithoutAbilityInput>
  }

  export type UsersAbilitiesCreateManyAbilityInputEnvelope = {
    data: UsersAbilitiesCreateManyAbilityInput | UsersAbilitiesCreateManyAbilityInput[]
    skipDuplicates?: boolean
  }

  export type UsersAbilitiesUpsertWithWhereUniqueWithoutAbilityInput = {
    where: UsersAbilitiesWhereUniqueInput
    update: XOR<UsersAbilitiesUpdateWithoutAbilityInput, UsersAbilitiesUncheckedUpdateWithoutAbilityInput>
    create: XOR<UsersAbilitiesCreateWithoutAbilityInput, UsersAbilitiesUncheckedCreateWithoutAbilityInput>
  }

  export type UsersAbilitiesUpdateWithWhereUniqueWithoutAbilityInput = {
    where: UsersAbilitiesWhereUniqueInput
    data: XOR<UsersAbilitiesUpdateWithoutAbilityInput, UsersAbilitiesUncheckedUpdateWithoutAbilityInput>
  }

  export type UsersAbilitiesUpdateManyWithWhereWithoutAbilityInput = {
    where: UsersAbilitiesScalarWhereInput
    data: XOR<UsersAbilitiesUpdateManyMutationInput, UsersAbilitiesUncheckedUpdateManyWithoutAbilityInput>
  }

  export type UsersCreateWithoutUsersAbilitiesInput = {
    id?: string
    name: string
    birthdate: Date | string
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    userDocuments?: UserDocumentsCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutUsersAbilitiesInput = {
    id?: string
    name: string
    birthdate: Date | string
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    userDocuments?: UserDocumentsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutUsersAbilitiesInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutUsersAbilitiesInput, UsersUncheckedCreateWithoutUsersAbilitiesInput>
  }

  export type AbilitiesCreateWithoutUsersAbilitiesInput = {
    id?: string
    name: string
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AbilitiesUncheckedCreateWithoutUsersAbilitiesInput = {
    id?: string
    name: string
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AbilitiesCreateOrConnectWithoutUsersAbilitiesInput = {
    where: AbilitiesWhereUniqueInput
    create: XOR<AbilitiesCreateWithoutUsersAbilitiesInput, AbilitiesUncheckedCreateWithoutUsersAbilitiesInput>
  }

  export type UsersUpsertWithoutUsersAbilitiesInput = {
    update: XOR<UsersUpdateWithoutUsersAbilitiesInput, UsersUncheckedUpdateWithoutUsersAbilitiesInput>
    create: XOR<UsersCreateWithoutUsersAbilitiesInput, UsersUncheckedCreateWithoutUsersAbilitiesInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutUsersAbilitiesInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutUsersAbilitiesInput, UsersUncheckedUpdateWithoutUsersAbilitiesInput>
  }

  export type UsersUpdateWithoutUsersAbilitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userDocuments?: UserDocumentsUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutUsersAbilitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userDocuments?: UserDocumentsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AbilitiesUpsertWithoutUsersAbilitiesInput = {
    update: XOR<AbilitiesUpdateWithoutUsersAbilitiesInput, AbilitiesUncheckedUpdateWithoutUsersAbilitiesInput>
    create: XOR<AbilitiesCreateWithoutUsersAbilitiesInput, AbilitiesUncheckedCreateWithoutUsersAbilitiesInput>
    where?: AbilitiesWhereInput
  }

  export type AbilitiesUpdateToOneWithWhereWithoutUsersAbilitiesInput = {
    where?: AbilitiesWhereInput
    data: XOR<AbilitiesUpdateWithoutUsersAbilitiesInput, AbilitiesUncheckedUpdateWithoutUsersAbilitiesInput>
  }

  export type AbilitiesUpdateWithoutUsersAbilitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbilitiesUncheckedUpdateWithoutUsersAbilitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserDocumentsCreateManyUserInput = {
    id?: string
    name: string
    url: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UsersAbilitiesCreateManyUserInput = {
    id?: string
    ability_id: string
    years_experience: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserDocumentsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserDocumentsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserDocumentsUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersAbilitiesUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    years_experience?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ability?: AbilitiesUpdateOneRequiredWithoutUsersAbilitiesNestedInput
  }

  export type UsersAbilitiesUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    ability_id?: StringFieldUpdateOperationsInput | string
    years_experience?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersAbilitiesUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    ability_id?: StringFieldUpdateOperationsInput | string
    years_experience?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersAbilitiesCreateManyAbilityInput = {
    id?: string
    user_id: string
    years_experience: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UsersAbilitiesUpdateWithoutAbilityInput = {
    id?: StringFieldUpdateOperationsInput | string
    years_experience?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutUsersAbilitiesNestedInput
  }

  export type UsersAbilitiesUncheckedUpdateWithoutAbilityInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    years_experience?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersAbilitiesUncheckedUpdateManyWithoutAbilityInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    years_experience?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}